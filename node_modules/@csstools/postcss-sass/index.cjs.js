'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var sourceMap = require('source-map');
var postcss = _interopDefault(require('postcss'));
var sassResolve = _interopDefault(require('@csstools/sass-import-resolve'));
var sass = _interopDefault(require('sass'));
var path = require('path');

// tooling

const sassMatch = /#sass$/; // returns merged source maps

var mergeSourceMaps = ((...maps) => {
  // new sourcemap
  const generator = new sourceMap.SourceMapGenerator(); // existing sourcemaps

  const consumersPromise = Promise.all(maps.map(map => new sourceMap.SourceMapConsumer(map)));
  return consumersPromise.then(consumers => consumers.forEach(consumer => {
    // copy each original mapping to the new sourcemap
    consumer.eachMapping(mapping => {
      const originalPosition = originalPositionFor(mapping, consumers);

      if (originalPosition.source) {
        generator.addMapping({
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          },
          original: {
            // use positive numbers to work around sass/libsass#2312
            line: Math.abs(originalPosition.line),
            column: Math.abs(originalPosition.column)
          },
          source: originalPosition.source,
          name: originalPosition.name
        });
      }
    }); // copy each original source to the new sourcemap

    consumer.sources.forEach(source => {
      generator._sources.add(source);

      const content = consumer.sourceContentFor(source);

      if (content !== null) {
        generator.setSourceContent(source, content);
      }
    });
  })).then(() => {
    // merged map as json
    const mergedMap = JSON.parse(generator); // clean all special sass sources in merged map

    mergedMap.sources = mergedMap.sources.map(source => source.replace(sassMatch, ''));
    return mergedMap;
  });
});

function originalPositionFor(mapping, consumers) {
  // initial positioning
  let originalPosition = {
    line: mapping.generatedLine,
    column: mapping.generatedColumn
  }; // special sass sources are mapped in reverse

  consumers.slice(0).reverse().forEach(consumer => {
    const possiblePosition = consumer.originalPositionFor(originalPosition);

    if (possiblePosition.source) {
      if (sassMatch.test(possiblePosition.source)) {
        originalPosition = possiblePosition;
      }
    }
  }); // regular sources are mapped regularly

  consumers.forEach(consumer => {
    const possiblePosition = consumer.originalPositionFor(originalPosition);

    if (possiblePosition.source) {
      if (!sassMatch.test(possiblePosition.source)) {
        originalPosition = possiblePosition;
      }
    }
  });
  return originalPosition;
}

// tooling

var index = postcss.plugin('postcss-sass', opts => (root, result) => {
  // postcss configuration
  const postConfig = Object.assign({}, result.opts, requiredPostConfig); // postcss results

  const _root$toResult = root.toResult(postConfig),
        postCSS = _root$toResult.css,
        postMap = _root$toResult.map; // include paths


  const includePaths = [].concat(opts && opts.includePaths || []); // sass resolve cache

  const cache = {};
  return new Promise( // promise sass results
  (resolve, reject) => sass.render( // pass options directly into node-sass
  Object.assign({}, opts, requiredSassConfig, {
    file: `${postConfig.from}#sass`,
    outFile: postConfig.from,
    data: postCSS,

    importer(id, parentId, done) {
      // resolve the absolute parent
      const parent = path.resolve(parentId); // cwds is the list of all directories to search

      const cwds = [path.dirname(parent)].concat(includePaths).map(includePath => path.resolve(includePath));
      cwds.reduce( // resolve the first available files
      (promise, cwd) => promise.catch(() => sassResolve(id, {
        cwd,
        cache,
        readFile: true
      })), Promise.reject()).then(({
        file,
        contents
      }) => {
        // push the dependency to watch tasks
        result.messages.push({
          type: 'dependency',
          file,
          parent
        }); // pass the file and contents back to sass

        done({
          file,
          contents
        });
      }, importerError => {
        // otherwise, pass the error
        done(importerError);
      });
    }

  }), (sassError, sassResult) => sassError ? reject(sassError) : resolve(sassResult))).then(({
    css: sassCSS,
    map: sassMap
  }) => mergeSourceMaps(postMap.toJSON(), JSON.parse(sassMap)).then(prev => {
    // update root to post-node-sass ast
    result.root = postcss.parse(sassCSS.toString(), Object.assign({}, postConfig, {
      map: {
        prev
      }
    }));
  }));
});
const requiredPostConfig = {
  map: {
    annotation: false,
    inline: false,
    sourcesContent: true
  }
};
const requiredSassConfig = {
  omitSourceMapUrl: true,
  sourceMap: true,
  sourceMapContents: true
};

module.exports = index;
